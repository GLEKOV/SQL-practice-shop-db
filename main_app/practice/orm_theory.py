# region Theory

# region ORM

# res.scalars().all() - чтобы получить список объектов ORM
#                       (scalars() - снимает обёртку кортежем) - объект ORM [Product(...), Product(...)]
# res.scalar()        - чтобы получить первый объект запроса ORM - объект ORM

# res.all() - даёт список строк-кортежей из одного объекта [(Product(...),), (Product(...), ...)]
# res.first() - даёт кортеж первой строки (Product(...),)
# res.one() - то же что и выше, только кинет ошибку если количество строк в res 0 или больше одной
# res.one_or_none() - то же что и выше - но без ошибки на пустой результат

# endregion


# region SQL alchemy

# res.all() - вернет все строки - каждая объект Row = [Row(id=1,name='Apple',price=10), ...]
# res.first() - вернет первую строку или None
# res.one() - вернет ровно одну строку или ошибка
# res.one_or_none() - то же но без ошибки на пустой результат
# res.scalar() - первое значение первой строки (например id)
# res.scalars().all() - список значений первого столбца - например список id = [1,2,3]
# res.mappings().all() - вернет список строк в виде словарей = [{'id':1,'name':'Apple','price':10}, ...]
# res.fetchone() - извлекает одну строку = Row() со смещением указателя (можно забирать данные из res по одной строке)
# res.fetchmany(size=3) - извлекает список строк со смещением указателя, чтобы брать данные батчами

# endregion

# region RAW SQL

"""

Агрегатные функции
Аппарат мышления:

Продумываем поля чистовой таблицы - | category_id | product_count | avg_price |
Представляем таблицу, которая содержит все нужные нам данные
FROM products_categories pc
JOIN products p ON pc.product_id = p.id

Делим нашу таблицу на группы, к которым будут применяться функции-агрегаты через GROUP BY *same column value*

в SELECT выбираем нужные нам поля для "чистовой" таблицы
SELECT category_id, COUNT(*) AS product_count, AVG(price) as avg_price




SELECT - через запятую какие именно поля хотим выбрать
FROM - из какой таблицы


Агрегатные функции задаются по группам, которые задаются через GROUP BY.
GROUP BY = «Все строки, у которых значение column одинаковое, объединяем в одну группу».
Создаются группы данных на основе одинаковых значений колонки, которую мы выбрали через GROUP BY

когда группы созданы, SQL берёт каждую группу отдельно и применяет агрегаты:

"""
