from datetime import datetime, timezone, timedelta

from main_app.models.category import Category
from models import Product
from enum import Enum


categories_list = [
    # Root categories
    Category(
        id=1,
        name="Electronics",
        slug="electronics",
        description="All electronic devices",
    ),
    Category(
        id=2, name="Clothing", slug="clothing", description="Men and women clothing"
    ),
    Category(
        id=3,
        name="Home & Kitchen",
        slug="home-kitchen",
        description="Household and kitchen items",
    ),
    Category(
        id=4,
        name="Sports & Outdoors",
        slug="sports-outdoors",
        description="Sports, fitness and outdoor gear",
    ),
    Category(
        id=5, name="Books", slug="books", description="Printed and electronic books"
    ),
    Category(
        id=6,
        name="Food & Beverages",
        slug="food-beverages",
        description="Groceries, snacks and drinks",
    ),
    # Electronics subcategories
    Category(
        id=7,
        name="Smartphones",
        slug="smartphones",
        description="Mobile phones",
        parent_id=1,
    ),
    Category(
        id=8,
        name="Laptops",
        slug="laptops",
        description="Personal and business laptops",
        parent_id=1,
    ),
    Category(
        id=9,
        name="Tablets",
        slug="tablets",
        description="Portable tablets",
        parent_id=1,
    ),
    Category(
        id=10,
        name="Headphones",
        slug="headphones",
        description="Audio headphones and earphones",
        parent_id=1,
    ),
    Category(
        id=11,
        name="Cameras",
        slug="cameras",
        description="DSLR and mirrorless cameras",
        parent_id=1,
    ),
    Category(
        id=12,
        name="Smartwatches",
        slug="smartwatches",
        description="Wearable devices",
        parent_id=1,
    ),
    # Clothing subcategories
    Category(
        id=13,
        name="Men's Clothing",
        slug="mens-clothing",
        description="Clothing for men",
        parent_id=2,
    ),
    Category(
        id=14,
        name="Women's Clothing",
        slug="womens-clothing",
        description="Clothing for women",
        parent_id=2,
    ),
    Category(
        id=15,
        name="Kids' Clothing",
        slug="kids-clothing",
        description="Clothing for kids",
        parent_id=2,
    ),
    Category(
        id=16,
        name="Shoes",
        slug="shoes",
        description="All types of footwear",
        parent_id=2,
    ),
    Category(
        id=17,
        name="Accessories",
        slug="accessories",
        description="Belts, hats, scarves",
        parent_id=2,
    ),
    # Home & Kitchen subcategories
    Category(
        id=18,
        name="Furniture",
        slug="furniture",
        description="Home and office furniture",
        parent_id=3,
    ),
    Category(
        id=19,
        name="Appliances",
        slug="appliances",
        description="Kitchen and home appliances",
        parent_id=3,
    ),
    Category(
        id=20,
        name="Decor",
        slug="decor",
        description="Home decoration items",
        parent_id=3,
    ),
    Category(
        id=21,
        name="Bedding",
        slug="bedding",
        description="Bedsheets, pillows, blankets",
        parent_id=3,
    ),
    Category(
        id=22,
        name="Lighting",
        slug="lighting",
        description="Lamps and lighting",
        parent_id=3,
    ),
    # Sports & Outdoors subcategories
    Category(
        id=23,
        name="Fitness Equipment",
        slug="fitness-equipment",
        description="Gym and workout equipment",
        parent_id=4,
    ),
    Category(
        id=24,
        name="Cycling",
        slug="cycling",
        description="Bicycles and cycling gear",
        parent_id=4,
    ),
    Category(
        id=25,
        name="Camping & Hiking",
        slug="camping-hiking",
        description="Outdoor and hiking gear",
        parent_id=4,
    ),
    Category(
        id=26,
        name="Team Sports",
        slug="team-sports",
        description="Football, basketball, volleyball",
        parent_id=4,
    ),
    # Books subcategories
    Category(
        id=27,
        name="Fiction",
        slug="fiction",
        description="Novels and stories",
        parent_id=5,
    ),
    Category(
        id=28,
        name="Non-fiction",
        slug="non-fiction",
        description="Science, history, biography",
        parent_id=5,
    ),
    Category(
        id=29,
        name="Children's Books",
        slug="childrens-books",
        description="Books for kids",
        parent_id=5,
    ),
    Category(
        id=30,
        name="Educational",
        slug="educational",
        description="School and university books",
        parent_id=5,
    ),
    # Food & Beverages subcategories
    Category(
        id=31,
        name="Snacks",
        slug="snacks",
        description="Chips, biscuits, sweets",
        parent_id=6,
    ),
    Category(
        id=32,
        name="Beverages",
        slug="beverages",
        description="Tea, coffee, juice",
        parent_id=6,
    ),
    Category(
        id=33,
        name="Fresh Produce",
        slug="fresh-produce",
        description="Fruits and vegetables",
        parent_id=6,
    ),
    Category(
        id=34,
        name="Meat & Seafood",
        slug="meat-seafood",
        description="Fresh and frozen products",
        parent_id=6,
    ),
]


def get_categories() -> list[Category]:
    for c in categories_list:
        c.created_at = datetime.now()
        c.updated_at = datetime.now()
    return categories_list


#  region Adress generation
class DataLists:

    cities: list[str] = [
        "New Haven",
        "Portsmouth",
        "Bremen",
        "Santa Rosa",
        "Wichita Falls",
        "Cambridge",
        "Florence",
        "San Marcos",
        "Greenfield",
        "Hamilton",
        "Newcastle",
        "Fairview",
        "Brooklyn",
        "Lebanon",
        "Riverside",
        "Summerville",
        "Madison",
        "Cedar Rapids",
        "Norwich",
        "Ashland",
        "Bellevue",
        "Lexington",
        "Franklin",
        "Salinas",
        "Hillsboro",
        "Springfield",
        "Lancaster",
        "Greenville",
        "Concord",
        "Richmond",
        "Troy",
        "Middletown",
        "Bristol",
        "Lakewood",
        "Georgetown",
        "Danville",
        "Columbus",
        "Jacksonville",
        "Cleveland",
        "Evansville",
        "Burlington",
        "Gainesville",
        "Huntington",
        "Bloomington",
        "Valdosta",
        "Rockville",
        "Grand Rapids",
        "Longview",
        "Winchester",
        "Chesterfield",
        "Sarasota",
        "Oakland",
        "Aurora",
        "Knoxville",
        "Anderson",
        "Elgin",
        "Peoria",
        "Fayetteville",
        "Macon",
        "Stockton",
        "Davenport",
        "Fort Myers",
        "St. Cloud",
        "Henderson",
        "Monroe",
        "Nashua",
        "Erie",
        "Harrisonburg",
        "Santa Fe",
        "Abilene",
        "Stillwater",
        "Lawrence",
        "Yakima",
        "Eugene",
        "Salem",
        "Waterbury",
        "Fremont",
        "Irving",
        "Odessa",
        "Beaumont",
        "Naperville",
        "Ann Arbor",
        "Toledo",
        "Daytona Beach",
        "Clarksville",
        "Decatur",
        "Waco",
        "Rochester",
        "Bozeman",
        "Helena",
        "Rapid City",
        "Lubbock",
        "Billings",
        "Tulsa",
        "Des Moines",
        "Charleston",
        "Savannah",
        "Fort Collins",
        "Mesa",
        "Reno",
        "Tempe",
    ]

    states: list[str] = [
        "Alabama",
        "Alaska",
        "Arizona",
        "Arkansas",
        "California",
        "Colorado",
        "Connecticut",
        "Delaware",
        "Florida",
        "Georgia",
        "Hawaii",
        "Idaho",
        "Illinois",
        "Indiana",
        "Iowa",
        "Kansas",
        "Kentucky",
        "Louisiana",
        "Maine",
        "Maryland",
        "Massachusetts",
        "Michigan",
        "Minnesota",
        "Mississippi",
        "Missouri",
        "Montana",
        "Nebraska",
        "Nevada",
        "New Hampshire",
        "New Jersey",
        "New Mexico",
        "New York",
        "North Carolina",
        "North Dakota",
        "Ohio",
        "Oklahoma",
        "Oregon",
        "Pennsylvania",
        "Rhode Island",
        "South Carolina",
        "South Dakota",
        "Tennessee",
        "Texas",
        "Utah",
        "Vermont",
        "Virginia",
        "Washington",
        "West Virginia",
        "Wisconsin",
        "Wyoming",
    ]

    streets: list[str] = [
        "Main Street",
        "Maple Avenue",
        "Oak Street",
        "Pine Lane",
        "Cedar Road",
        "Elm Street",
        "Washington Avenue",
        "Lakeview Drive",
        "Hill Street",
        "Sunset Boulevard",
        "Cherry Lane",
        "Park Avenue",
        "River Road",
        "High Street",
        "Forest Drive",
        "Walnut Street",
        "2nd Street",
        "3rd Street",
        "4th Street",
        "5th Avenue",
        "6th Street",
        "7th Avenue",
        "8th Street",
        "9th Avenue",
        "10th Street",
        "Broadway",
        "Center Street",
        "Chestnut Street",
        "Church Street",
        "College Street",
        "Court Street",
        "Division Street",
        "East Street",
        "Front Street",
        "Garden Street",
        "Green Street",
        "Jackson Street",
        "Jefferson Avenue",
        "King Street",
        "Liberty Street",
        "Lincoln Avenue",
        "Madison Street",
        "Main Avenue",
        "Mill Street",
        "Monroe Street",
        "North Street",
        "Park Street",
        "Pleasant Street",
        "Poplar Street",
        "Prospect Street",
        "River Street",
        "School Street",
        "South Street",
        "Spring Street",
        "State Street",
        "Union Street",
        "Walnut Avenue",
        "Washington Street",
        "West Street",
        "Adams Street",
        "Alexander Avenue",
        "Anthony Street",
        "Baker Street",
        "Baldwin Street",
        "Bay Street",
        "Beaver Street",
        "Birch Street",
        "Bridge Street",
        "Broad Street",
        "Brown Street",
        "Canal Street",
        "Carroll Street",
        "Clinton Street",
        "Columbia Street",
        "Davis Street",
        "Dogwood Lane",
        "Douglas Avenue",
        "Eastwood Street",
        "Fairview Avenue",
        "Franklin Street",
        "Grove Street",
        "Hamilton Street",
        "Harrison Avenue",
        "Hickory Lane",
        "Howard Street",
        "Jefferson Street",
        "Kingston Road",
        "Laurel Street",
        "Madison Avenue",
        "Maple Street",
        "Meadow Lane",
        "Mill Avenue",
        "Oak Avenue",
        "Park Lane",
        "Pleasant Avenue",
        "Poplar Avenue",
        "Prospect Avenue",
        "River Avenue",
        "School Avenue",
        "Spring Avenue",
        "State Avenue",
    ]

    countries: list[str] = [
        "US",
        "CA",
        "GB",
        "FR",
        "DE",
        "IT",
        "ES",
        "RU",
        "CN",
        "JP",
        "KR",
        "IN",
        "BR",
        "AU",
        "MX",
        "NL",
        "SE",
        "NO",
        "DK",
        "FI",
        "BE",
        "CH",
        "AT",
        "PL",
        "PT",
        "GR",
        "IE",
        "NZ",
        "SG",
        "TH",
        "MY",
        "ID",
        "PH",
        "VN",
        "ZA",
        "EG",
        "TR",
        "SA",
        "AE",
        "IL",
        "PK",
        "BD",
        "LK",
        "NP",
        "KH",
        "MM",
        "IR",
        "IQ",
        "SY",
        "JO",
        "LB",
        "KW",
        "QA",
        "OM",
        "YE",
        "DZ",
        "MA",
        "TN",
        "LY",
        "ET",
        "KE",
        "UG",
        "TZ",
        "NG",
        "GH",
        "CI",
        "SN",
        "ML",
        "BF",
        "NE",
        "TD",
        "SD",
        "CM",
        "CD",
        "ZW",
        "MW",
        "ZM",
        "MZ",
        "AO",
        "NA",
        "BW",
        "LS",
        "SZ",
        "MV",
        "BN",
        "KH",
        "LA",
        "MN",
        "NP",
        "BT",
        "TW",
        "HK",
        "MO",
        "KP",
        "AF",
        "TM",
        "UZ",
        "KG",
        "TJ",
        "KZ",
        "MN",
        "GE",
        "AM",
        "AZ",
        "BY",
        "UA",
        "MD",
    ]


# endregion


class OrderStatusENUM(str, Enum):
    PENDING = "pending"
    PAID = "paid"
    ASSEMBLING = "assembling"
    SHIPPING = "shipping"
    DELIVERED = "delivered"
    COMPLETED = "completed"
    CANCELED = "canceled"

    @classmethod
    def is_final(cls, status: str) -> bool:
        return status in {cls.COMPLETED, cls.CANCELED}

    @classmethod
    def is_active(cls, status: str) -> bool:
        return status in {
            cls.PENDING,
            cls.PAID,
            cls.SHIPPING,
            cls.DELIVERED,
            cls.ASSEMBLING,
        }
